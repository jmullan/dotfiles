#!/usr/bin/env -S python-venv --virtualenv dotfiles
"""Yell at sonatype sometimes"""

import abc
import ast
import dataclasses
import json
import logging
import os
import re
import typing
from xml.etree import ElementTree

import jproperties
import requests

from jmullan_cmd import cmd
from jmullan_logging import easy_logging
from jmullan_logging.helpers import logging_context

logger = logging.getLogger(__name__)

easy_logging.easy_initialize_logging()


T = typing.TypeVar("T")

REPOS = ["snapshots", "releases"]


class UniqueByUrl(abc.ABC):
    @property
    @abc.abstractmethod
    def url(self): ...

    def __eq__(self, other):
        return self.url == other.url

    def __hash__(self):
        return hash(self.url)


@dataclasses.dataclass(frozen=True)
class Repo(UniqueByUrl):
    sonatype_path: str
    name: str

    @property
    def url(self) -> str:
        return f"{self.sonatype_path}/{self.name}"

    def context(self) -> dict[str, typing.Any]:
        return {"nexus_repo": self.name}


@dataclasses.dataclass(frozen=True)
class Group:
    group_id: str

    @property
    def group_path(self):
        return self.group_id.replace(".", "/")

    def context(self) -> dict[str, typing.Any]:
        return {"group_id": self.group_id}


@dataclasses.dataclass(frozen=True)
class RepoArtifact(UniqueByUrl):
    nexus_repo: Repo
    group: Group
    artifact_id: str

    @property
    def url(self) -> str:
        return f"{self.nexus_repo.url}/{self.group.group_path}/{self.artifact_id}"

    @property
    def metadata_url(self) -> str:
        return f"{self.url}/maven-metadata.xml"

    @property
    def metadata_sha_url(self) -> str:
        return f"{self.metadata_url}.sha1"

    def context(self) -> dict[str, typing.Any]:
        context = self.nexus_repo.context()
        context.update(self.group.context())
        context["artifact_id"] = self.artifact_id
        return context


@dataclasses.dataclass(frozen=True)
class ArtifactVersion(UniqueByUrl):
    repo_artifact: RepoArtifact
    version: str

    @property
    def url(self) -> str:
        return f"{self.repo_artifact.url}/{self.version}"

    @property
    def metadata_url(self) -> str:
        return f"{self.url}/maven-metadata.xml"

    @property
    def metadata_sha_url(self) -> str:
        return f"{self.metadata_url}.sha1"

    @property
    def artifact_id(self):
        return self.repo_artifact.artifact_id

    def context(self) -> dict[str, typing.Any]:
        context = self.repo_artifact.context()
        context["version"] = self.version
        return context


@dataclasses.dataclass(frozen=True)
class ArtifactVersionExtension(UniqueByUrl):
    artifact_version: ArtifactVersion
    extension: str
    sub_version: str

    @property
    def url(self) -> str:
        return f"{self.artifact_version.url}/{self.artifact_id}-{self.sub_version}.{self.extension}"

    @property
    def sha_url(self) -> str:
        return f"{self.url}.sha1"

    @property
    def artifact_id(self):
        return self.artifact_version.artifact_id

    def context(self) -> dict[str, typing.Any]:
        context = self.artifact_version.context()
        context["extension"] = self.sub_version
        context["sub_version"] = self.sub_version
        return context


@dataclasses.dataclass
class GradleSettings:
    root_project_name: str | None
    includes: list[str]


def find_properties():
    for root, dirs, files in os.walk("./", topdown=True):
        for filename in files:
            if filename in ["gradle.properties", "release.properties"]:
                yield os.path.join(root, filename)


def guess_repo(version: str):
    if version is None:
        return None
    if "SNAPSHOT" in version.upper():
        return "snapshots"
    else:
        return "releases"


def parse_gradle_settings(data: str) -> GradleSettings | None:
    root_project_name = None
    includes = []
    if data is None:
        return None
    lines = data.split("\n")
    for line in lines:
        line = re.sub("#.*", "", line)
        line = line.strip()
        if len(line) == 0:
            continue
        if line.startswith("rootProject.name"):
            split = line.split("=", 1)
            if len(split) > 1:
                value = split[1].strip()
                try:
                    value = json.loads(value)
                except Exception:
                    try:
                        value = ast.literal_eval(value)
                    except Exception:
                        pass
                root_project_name = value
                continue
        if line.startswith("include "):
            # include 'signon-service-dto', 'signon-service'
            parts = line.split(" ", 1)
            if len(parts) > 1:
                value = parts[1:][0]
                try:
                    value = json.loads(value)
                except Exception:
                    try:
                        value = ast.literal_eval(value)
                    except Exception:
                        pass
                if isinstance(value, tuple):
                    value = list(value)
                if isinstance(value, str):
                    value = [value]
                value = [x.strip(":") for x in value]
                includes.extend(value)

    return GradleSettings(root_project_name, includes)


def read_gradle_settings() -> GradleSettings | None:
    filename = "./settings.gradle"
    if os.path.exists(filename):
        with open(filename, encoding="utf-8") as f:
            return parse_gradle_settings(f.read())
    return None


class Main(cmd.Main):
    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--version",
            dest="version",
            default=None,
            help="Force this version",
        )
        self.parser.add_argument(
            "--group",
            dest="group_id",
            default=None,
            help="Force this group",
        )
        self.parser.add_argument(
            "--artifact",
            dest="artifact",
            default=None,
            help="Force this artifact",
        )
        self.parser.add_argument(
            "--extension",
            dest="extension",
            default=None,
            help="Force this artifact",
        )
        self.parser.add_argument(
            "--sonatype-base-url",
            dest="sonatype_base_url",
            default=os.environ.get("SONATYPE_BASE_URL"),
        )
        self.parser.add_argument(
            "--thorough", dest="thorough", action="store_true", default=False
        )
        self.parser.add_argument(
            "--nexus-repo",
            dest="nexus_repo",
            choices=REPOS,
            default=None,
        )
        self.configs = dict()
        self.gets = dict()
        self.repos: dict[str, Repo] = dict()

    def get(self, url) -> requests.Response:
        if url not in self.gets:
            try:
                self.gets[url] = requests.get(url)
                if self.gets[url].status_code >= 400:
                    logger.warning("GET %s %s", self.gets[url].status_code, url)
                else:
                    logger.info("GET %s %s", self.gets[url].status_code, url)
            except Exception:
                logger.exception("Error fetching %s", url)
        return self.gets.get(url)

    def load_properties_into_configs(self, filename):
        try:
            with open(filename, "rb") as config_file:
                config = jproperties.Properties()
                config.load(config_file)
                self.configs[filename] = dict()
                for item in config.items():
                    self.configs[filename][item[0]] = item[1].data
        except Exception:
            logger.exception("Oopies")

    def main(self):
        super().main()
        sonatype_path = f"{self.args.sonatype_base_url}/nexus/content/repositories"
        for nexus_repo in REPOS:
            self.repos[nexus_repo] = Repo(sonatype_path, nexus_repo)

        for path in find_properties():
            self.load_properties_into_configs(path)
        gradle_settings = read_gradle_settings()

        artifact_versions: set[ArtifactVersion] = set()

        properties = {}
        properties.update(self.configs.get("./gradle.properties") or {})
        release_properties = {}
        release_properties.update(properties)
        release_properties.update(self.configs.get("./release.properties") or {})
        base_artifact_id = self.get_artifact_id(properties, release_properties)
        base_group = self.get_group(properties, release_properties)

        sonatype_artifact_versions: set[ArtifactVersion] = set()
        if base_group and base_artifact_id:
            artifact_versions.update(
                self.get_artifact_versions_from_properties(
                    base_group, base_artifact_id, properties, release_properties
                )
            )
            sonatype_artifact_versions.update(
                self.get_artifact_versions_from_sonatype(base_group, base_artifact_id)
            )

        includes = gradle_settings.includes or []
        if includes:
            for include in includes:
                include_properties = {}
                include_properties.update(properties)
                include_properties.update(
                    self.configs.get(f"./{include}/gradle.properties") or {}
                )
                include_release_properties = {}
                include_release_properties.update(include_properties)
                include_release_properties.update(release_properties)
                include_release_properties.update(
                    self.configs.get(f"./{include}/release.properties") or {}
                )

                include_group = self.get_group(
                    include_properties, include_release_properties
                )
                include_artifact_id = self.get_artifact_id(
                    include_properties, include_release_properties
                )
                if include_group and include_artifact_id:
                    sonatype_artifact_versions.update(
                        self.get_artifact_versions_from_sonatype(
                            include_group, include_artifact_id
                        )
                    )

                    artifact_versions.update(
                        self.get_artifact_versions_from_properties(
                            include_group,
                            include_artifact_id,
                            include_properties,
                            include_release_properties,
                        )
                    )

        if self.args.thorough:
            artifact_versions.update(sonatype_artifact_versions)

        expected_extensions: set[str]
        if self.args.extension:
            expected_extensions = {self.args.extension}
        else:
            expected_extensions = {"pom", "jar"}
        artifact_version_extensions: set[ArtifactVersionExtension] = set()
        for artifact_version in sorted(artifact_versions, key=lambda x: x.url):
            with logging_context(**artifact_version.context()):
                extension: str | None = self.args.extension
                if extension is not None:
                    artifact_version_extension = ArtifactVersionExtension(
                        artifact_version, extension, artifact_version.version
                    )
                    artifact_version_extensions.add(artifact_version_extension)
                if artifact_version.repo_artifact.nexus_repo.name == "releases":
                    for extension in expected_extensions:
                        artifact_sub_version = ArtifactVersionExtension(
                            artifact_version, extension, artifact_version.version
                        )
                        artifact_version_extensions.add(artifact_sub_version)
                if artifact_version.repo_artifact.nexus_repo.name == "snapshots":
                    self.get(artifact_version.metadata_sha_url)
                    artifact_version_response = self.get(artifact_version.metadata_url)
                    artifact_version_content = artifact_version_response.content
                    try:
                        tree = ElementTree.fromstring(artifact_version_content)
                    except Exception:
                        logger.warning(
                            "Could not load %s", artifact_version.metadata_url
                        )
                        continue
                    versioning = tree.find("versioning")
                    if not versioning:
                        continue
                    snapshot_versions = versioning.find("snapshotVersions")
                    if snapshot_versions:
                        for snapshot_version in snapshot_versions.iter(
                            "snapshotVersion"
                        ):
                            extension = snapshot_version.find("extension").text
                            if (
                                self.args.thorough
                                or self.args.extension is None
                                or self.args.extension == extension
                            ):
                                expected_extensions.add(extension)
                                sub_version = snapshot_version.find("value").text
                                artifact_sub_version = ArtifactVersionExtension(
                                    artifact_version, extension, sub_version
                                )
                                artifact_version_extensions.add(artifact_sub_version)

        for artifact_version_extension in artifact_version_extensions:
            self.get(artifact_version_extension.sha_url)

    def get_artifact_versions_from_properties(
        self, group, artifact_id, properties, release_properties
    ) -> list[ArtifactVersion]:
        with logging_context(group_id=group.group_id, artifact_id=artifact_id):
            if not group or not artifact_id:
                logger.debug(f"Skipping {group=} {artifact_id=}")
                return []

            artifact_versions = []
            for version in self.get_versions(properties, release_properties):
                if version is None:
                    continue
                guessed_repo = self.guess_repo(version)
                forced_repo = self.args.nexus_repo
                if forced_repo is None or forced_repo == guessed_repo:
                    repo = self.repos.get(guessed_repo)
                    repo_artifact = RepoArtifact(repo, group, artifact_id)
                    artifact_version = ArtifactVersion(repo_artifact, version)
                    artifact_versions.append(artifact_version)
            return artifact_versions

    def get_artifact_id(self, properties, release_properties) -> str | None:
        args_artifact_id = self.args.artifact
        properties_artifact_id = properties.get("artifactId")
        release_properties_artifact_id = release_properties.get("artifactId")
        for artifact_id in (
            args_artifact_id,
            properties_artifact_id,
            release_properties_artifact_id,
        ):
            if artifact_id is not None:
                return artifact_id
        logger.debug("Did not find artifact_id")
        return None

    def get_group(self, properties, release_properties) -> Group | None:
        group_id = self.args.group_id
        if group_id is not None:
            return Group(group_id)
        for p in properties, release_properties:
            group_id = p.get("groupId")
            if group_id is not None:
                return Group(group_id)
        logger.debug("Did not find group")
        return None

    def get_versions(self, properties, release_properties) -> list[str]:
        args_version = self.args.version
        if args_version is not None:
            return [args_version]
        properties_version = properties.get("version")
        release_version = release_properties.get("version")
        versions = list(
            set(x for x in [properties_version, release_version] if x is not None)
        )
        if not versions and not self.args.thorough:
            raise ValueError(
                "Could not find versions in properties files (try --thorough or specifying a version directly"
            )
        return versions

    def guess_repo(self, version) -> str:
        if version is None:
            raise ValueError("Cannot guess repo for none version")
        if "SNAPSHOT" in version.upper():
            return "snapshots"
        else:
            return "releases"

    def get_artifact_versions_from_sonatype(
        self, group: Group, artifact_id: str
    ) -> set[ArtifactVersion]:
        with logging_context(artifact_id=artifact_id, **group.context()):
            if self.args.nexus_repo:
                nexus_repos = [self.args.nexus_repo]
            else:
                nexus_repos = REPOS
            artifact_versions: set[ArtifactVersion] = set()
            for nexus_repo in nexus_repos:
                repo = self.repos[nexus_repo]
                with logging_context(**repo.context()):
                    repo_artifact = RepoArtifact(repo, group, artifact_id)
                    self.get(repo_artifact.metadata_sha_url)

                    artifact_response = self.get(repo_artifact.metadata_url)
                    if artifact_response.status_code < 400:
                        artifact_content = artifact_response.content
                        try:
                            tree = ElementTree.fromstring(artifact_content)
                            versioning = tree.find("versioning")
                            version = versioning.find("latest").text.strip()
                            artifact_version = ArtifactVersion(repo_artifact, version)
                            artifact_versions.add(artifact_version)
                            for version_tag in versioning.iter("version"):
                                version_tag_value = version_tag.text.strip()
                                if version_tag_value and version_tag != version:
                                    artifact_version = ArtifactVersion(
                                        repo_artifact, version_tag_value
                                    )
                                    artifact_versions.add(artifact_version)
                        except Exception:
                            logger.error("Could not parse xml")
        return artifact_versions


if __name__ == "__main__":
    Main().main()
