#!/usr/bin/env -S python-venv --virtualenv dotfiles

import configparser
import datetime
import json
import os
import re
import signal
import subprocess
import sys
from typing import Any

CLOUD = "\u2601\ufe0f"
# colorist is too slow to import
COLORS = {
    "Color.DEFAULT": "\x1b[39m",
    "Color.GREEN": "\x1b[32m",
    "Color.RED": "\x1b[31m",
}

CREDENTIALS_PATH = os.path.expanduser("~/.aws/credentials")
CACHED_CALLER_IDENTITY = os.path.expanduser("~/.aws/caller_identity.json")


def get_env_or_none(key: str) -> str | None:
    value = os.environ.get(key)
    if value is None:
        return None
    if len(value) == 0:
        return None
    return value


def interrupt_handler(*_, **__):
    sys.exit(0)


def get_aws_command() -> str | None:
    result = subprocess.run(["which", "aws"], text=True, stdout=subprocess.PIPE)
    found = result.stdout.strip()
    if len(found):
        return found
    return None


def get_arn() -> str | None:
    keys = unexpired_access_keys()
    if not keys:
        return None
    if os.path.exists(CACHED_CALLER_IDENTITY):
        with open(CACHED_CALLER_IDENTITY, "r") as h:
            cached_identity: dict[str, Any] = json.load(h)
            if cached_identity:
                access_key = cached_identity.get("access_key")
                caller_identity = cached_identity.get("caller_identity")
                if access_key in keys:
                    return caller_identity.get("Arn")
    import boto3

    session = boto3.Session()
    credentials = session.get_credentials().get_frozen_credentials()
    access_key = credentials.access_key
    sts = boto3.client("sts")
    caller_identity = sts.get_caller_identity()
    arn = caller_identity.get("Arn")
    if arn is None:
        return None
    cache_dir = os.path.dirname(CACHED_CALLER_IDENTITY)
    if os.path.exists(cache_dir):
        with open(CACHED_CALLER_IDENTITY, "w") as h:
            cached_identity = {
                "access_key": access_key,
                "caller_identity": caller_identity,
            }
            json.dump(cached_identity, h, indent=4)
    return arn


def get_assumed_role(aws_workload_prefix: str | None) -> str | None:
    user_arn = get_arn()
    if user_arn is None:
        return None
    assumed_role = re.sub(r".*assumed-role/SAML-", "", user_arn)
    if aws_workload_prefix is not None:
        assumed_role = assumed_role.removeprefix(aws_workload_prefix)
    assumed_role = re.sub(r"/[-_.a-zA-Z]+@[-_.a-zA-Z]+$", "", assumed_role).strip()
    if len(assumed_role) > 0:
        return assumed_role
    return None


def unexpired_access_keys() -> list[str]:
    now = datetime.datetime.now(datetime.UTC)
    access_keys: list[str] = []
    if os.path.exists(CREDENTIALS_PATH):
        config = configparser.ConfigParser()
        config.read(CREDENTIALS_PATH)
        for label, values in config.items():
            try:
                x_security_token_expires = values.get("x_security_token_expires")
                if x_security_token_expires is None:
                    continue
                access_key = values.get("aws_access_key_id")
                if access_key is None:
                    continue
                expiration = datetime.datetime.fromisoformat(x_security_token_expires)
                if expiration < now:
                    continue
                access_keys.append(access_key)
            except Exception:
                pass
    return access_keys


def main():
    parts = []
    aws_region = get_env_or_none("AWS_REGION")
    aws_profile = get_env_or_none("AWS_PROFILE")
    aws_workload = get_env_or_none("AWS_WORKLOAD")
    aws_workload_prefix: str | None = None
    if aws_region is not None:
        parts.append(aws_region)
    if aws_workload is not None:
        aws_workload_prefix = f"{aws_workload}-"
        parts.append(aws_workload)
    if aws_profile is not None:
        if aws_workload_prefix is not None:
            aws_profile = aws_profile.removeprefix(aws_workload_prefix)
        if len(aws_profile) > 0:
            parts.append(aws_profile)

    assumed_role = get_assumed_role(aws_workload_prefix)
    if assumed_role is not None:
        parts.append(assumed_role)
    elif parts:
        parts.append(f"{COLORS['Color.RED']}\u2205{COLORS['Color.DEFAULT']}")

    if parts:
        parts = [CLOUD] + parts
        prompt = ":".join(parts)
        print(f"({prompt})", end="")


if __name__ == "__main__":
    signal.signal(signal.SIGINT, interrupt_handler)
    main()
