#!/usr/bin/env -S python-venv --virtualenv dotfiles
import dataclasses
import logging
import os.path
import re
import sys

from colorist import Color
from jmullan_cmd import cmd
from jmullan_logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)

OSX_JAVA_VIRTUAL_MACHINES_DIR = "/Library/Java/JavaVirtualMachines/"



@dataclasses.dataclass
class JVM:
    home: str
    version: str
    shortname: str


def guess_version(value: str):
    matches = re.search(r"-([1-9][0-9]*)\.jdk", value)
    if matches:
        return matches.group(1)
    matches = re.search("\b([1-9][0-9]*)\b", value)
    if matches:
        return matches.group(1)
    return ""


def osx_java_virtual_machines() -> list[JVM]:
    if not os.path.exists(OSX_JAVA_VIRTUAL_MACHINES_DIR):
        return []
    jvms = []
    dir_list = os.listdir(OSX_JAVA_VIRTUAL_MACHINES_DIR)
    for jdk_dir in dir_list:
        jdk_dir_home = f"{OSX_JAVA_VIRTUAL_MACHINES_DIR}/{jdk_dir}/Contents/Home"
        java_bin = f"{jdk_dir_home}/bin/java"
        if jdk_dir.endswith(".jdk") and os.path.exists(java_bin):
            jvm = JVM(
                jdk_dir_home,
                guess_version(jdk_dir),
                jdk_dir
            )
            jvms.append(jvm)
    return jvms


def get_sdk_virtual_machines() -> list[JVM]:
    sdk_dir = os.environ.get("SDKMAN_CANDIDATES_DIR")
    if sdk_dir is None or not os.path.exists(sdk_dir):
        return []
    sdk_java_dir = f"{sdk_dir}/java"
    if sdk_java_dir is None or not os.path.exists(sdk_java_dir):
        return []
    jvms = []
    dir_list = os.listdir(sdk_java_dir)
    for jdk_dir in dir_list:
        jdk_dir_home = f"{get_sdk_virtual_machines}/{jdk_dir}"
        java_bin = f"{jdk_dir_home}/bin/java"
        if jdk_dir.endswith(".jdk") and os.path.exists(java_bin):
            jvm = JVM(
                jdk_dir_home,
                guess_version(jdk_dir),
                jdk_dir
            )
            jvms.append(jvm)

    return jvms


def java_versions() -> list[JVM]:
    jvms = []
    jvms.extend(osx_java_virtual_machines())
    jvms.extend(get_sdk_virtual_machines())
    return jvms


def find_up(filename: str) -> str | None:
    working = os.getcwd()
    limit = 20
    while len(working) > 1 and limit > 0:
        limit -= 1
        logger.debug(f"{working}")
        if os.path.exists(f"{working}/{filename}"):
            return f'{working}/{filename}'
        working = os.path.dirname(working)


def load_sdk_man_rc(file_path: str) -> dict[str, str]:
    configs: dict[str, str] = {}
    with open(file_path) as handle:
        lines = handle.readlines()
    for line in lines:
        line = line.strip()
        if "=" in line:
            parts = line.split("=")
            configs[parts[0]] = parts[1]
    return configs


def get_java_version(java_home: str | None, sdk_dir: str | None) -> str | None:
    if java_home is None:
        return None
    java_bin = f"{java_home}/bin/java"
    if not os.path.exists(java_bin):
        logger.debug(f"{java_bin} does not appear to have java")
        return None
    if sdk_dir is None:
        logger.debug("sdk does not appear to be configured")
        return None
    if not os.path.exists(sdk_dir):
        logger.debug("configured sdk dir does not exist")
        return None
    sdk_java_candidate_dir = f"{sdk_dir}/java"
    sdk_current = f"{sdk_java_candidate_dir}/current"
    if java_home == sdk_current:
        if not os.path.islink(sdk_current):
            logger.debug("current sdk candidate isn't a link? very weird")
            return None
        java_home = os.path.realpath(sdk_current)
    if not java_home.startswith(sdk_java_candidate_dir):
        logger.debug(f"{java_home} does not appear to be managed by sdk")
        return None
    java_bin = f"{java_home}/bin/java"
    if not os.path.exists(java_bin):
        logger.debug(f"{java_home} does not appear to have java")
        return None
    no_trailing_slash = java_home.rstrip("/")
    return no_trailing_slash.split("/")[-1]


def resolve_java(java_config: str | None, java_home: str | None):
    if java_config is None and java_home is None:
        return
    logger.debug(f"{java_config}")
    sdk_dir = os.environ.get("SDKMAN_CANDIDATES_DIR")
    java_version = get_java_version(java_home, sdk_dir)
    if java_config is None and java_version is None:
        return
    if java_config is None:
        print(f" (\u2615:{java_version})", end="")
        return
    if java_version is None:
        print(f" (\u2615:{Color.RED}Missing {Color.OFF}{java_config})", end="")
        return
    if java_config != java_version:
        logger.debug(f"{java_config} expected, actual is: {java_version}")
        print(f" (\u2615:{Color.RED}{java_version}{Color.OFF}/{java_config})", end="")
    else:
        print(f" (\u2615:{Color.GREEN}{java_version}{Color.OFF})", end="")


class Main(cmd.Main):
    def __init__(self):
        super().__init__()

    def main(self):
        super().main()
        if self.args.verbose:
            easy_initialize_logging("DEBUG", stream=sys.stderr)
        else:
            easy_initialize_logging("INFO", stream=sys.stderr)
        sdk_man_rc = find_up(".sdkmanrc")
        if sdk_man_rc is None:
            return
        logger.debug(f"{sdk_man_rc}")
        configs = load_sdk_man_rc(sdk_man_rc)
        logger.debug(f"{configs}")
        java_home = os.environ.get("JAVA_HOME")
        resolve_java(configs.get('java'), java_home)


if __name__ == "__main__":
    Main().main()
