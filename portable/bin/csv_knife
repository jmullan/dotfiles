#!/usr/bin/env python-venv
import csv
import json
import sys
from string import Template
from typing import TextIO

from jmullan_cmd import cmd
from jmullan_logging.easy_logging import easy_initialize_logging
import logging

logger = logging.getLogger(__name__)

DIALECT_OPTIONS = csv.list_dialects() + ["sniff", "presto", "rovi"]


class PrestoDialect(csv.Dialect):
    delimiter = ","
    doublequote = True
    escapechar = None
    lineterminator = "\r\n"
    quotechar = '"'
    quoting = csv.QUOTE_ALL
    skipinitialspace = True
    strict = True


csv.register_dialect("excel", PrestoDialect)


class RoviDialect(csv.Dialect):
    delimiter = "\1"
    doublequote = True
    escapechar = None
    lineterminator = "\2"
    quotechar = "'"
    quoting = csv.QUOTE_NONE
    skipinitialspace = True
    strict = False


csv.register_dialect("rovi", RoviDialect)


def zip_header(header: list, row: list):
    field_count = max(len(header), len(row))
    zipped = {}
    for x in range(0, field_count):
        if x < len(header):
            h = header[x]
        else:
            h = f"_{x}"

        v = None
        if x < len(row):
            v = row[x]
        zipped[h] = v
    return zipped


def chunker(file_handle, newline: str, chunk_size: int = 4096):
    for line in _chunker(file_handle, newline, chunk_size):
        if newline in line:
            logger.error(f"Newline {newline!r} found in line {line!r}")
        yield line


def _chunker(file_handle, newline: str, chunk_size: int = 4096):
    prior_chunk = ""
    x = 1
    while True:
        x += 1
        chunk = file_handle.read(chunk_size)
        if chunk is None:
            break
        if len(chunk) == 0:
            break
        # first peel off any leading newlines
        while chunk.startswith(newline) and len(chunk) > 0:
            yield prior_chunk
            prior_chunk = ""
            chunk = chunk[1:]
        ends = []
        # now collect any trailing newlines
        while chunk.endswith(newline) and len(chunk) > 0:
            ends.append(newline)
            chunk = chunk[:-1]
        # at this point we have a chunk with no leading or trailing
        # newlines. It may or may not have newlines inside of it
        if newline not in chunk:
            if ends:
                # all the newlines were at the end. Use one of them to
                # clear out anything in a prior chunk and the current chunk
                yield prior_chunk + chunk
                prior_chunk = ""
                while ends:
                    # peel off any remaining newlines
                    yield ""
                    ends = ends[1:]
        else:
            # this chunk has newlines inside of it
            parts = chunk.split(newline)
            while len(parts) > 1:
                # peel off all but the last line of the chunk
                yield prior_chunk + parts[0]
                prior_chunk = ""
                parts = parts[1:]
            while len(ends) > 0:
                # there is at least one trailing newline
                if len(parts) > 0:
                    # there is at least one part left
                    yield prior_chunk + parts[0]
                    prior_chunk = ""
                    parts = parts[1:]
                else:
                    # there are no more parts, so clear out any
                    # prior chunks and ends
                    yield prior_chunk
                    prior_chunk = ""
                ends = ends[1:]
            if len(parts) > 0:
                prior_chunk = prior_chunk + parts[0]
    if len(prior_chunk):
        yield prior_chunk


def unquoted_reader(chunker, delimiter):
    for chunk in chunker:
        if chunk is not None:
            yield chunk.split(delimiter)


def process(csvfile, dialect_name, has_header: bool, template=None):
    logger.debug(f"Processing {csvfile=} {dialect_name=} {has_header=}")
    compiled_template = Template(template)

    if dialect_name == "sniff":
        dialect_name = csv.Sniffer().sniff(csvfile.read(1024))
        if template == "sniff":
            print(dialect_name.__dict__)
            exit(0)
        csvfile.seek(0)

    dialect = csv.get_dialect(dialect_name)
    chunk_iterator = chunker(csvfile, dialect.lineterminator)
    if dialect_name == "rovi" or dialect.quoting == csv.QUOTE_NONE:
        reader = unquoted_reader(chunk_iterator, delimiter=dialect.delimiter)
    else:
        reader = csv.reader(chunk_iterator, dialect=dialect_name)
    if has_header:
        try:
            header = next(reader)
        except StopIteration:
            logger.info("No content found when processing header")
            return
    else:
        header = []
    if template == "csv":
        writer = csv.writer(sys.stdout)
    else:
        writer = None
    for csv_row in reader:
        if csv_row is None:
            break
        d = zip_header(header, csv_row)
        if template is None:
            print(d)
        elif template == "json":
            print(json.dumps(d))
        elif template == "csv":
            writer.writerow(csv_row)
        else:
            print(compiled_template.substitute(d))


def open_file_or_stdin(
    filename: str, encoding="utf-8-sig", universal_newline=True
) -> TextIO:
    if filename == "-":
        return sys.stdin
    else:
        mode = "rU" if universal_newline else "r"
        return open(filename, mode, encoding=encoding)


class Main(cmd.Main):
    """Stream csv files in different ways."""

    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--has-header",
            dest="has_header",
            action="store_true",
            default=False,
            help="The csv has a header",
        )
        self.parser.add_argument(
            "--dialect", dest="dialect", default=None, choices=DIALECT_OPTIONS
        )
        self.parser.add_argument("--encoding", dest="encoding", default="utf-8-sig")
        self.parser.add_argument(
            "--sniff-only", dest="sniff", action="store_true", default=False
        )
        if hasattr(open, "newlines"):
            self.parser.add_argument(
                "--universal-newline",
                dest="universal_newline",
                action="store_true",
                default=None,
            )
            self.parser.add_argument(
                "--no-universal-newline",
                dest="no_universal_newline",
                action="store_false",
                default=None,
            )
        self.parser.add_argument(
            "-t",
            "--template",
            dest="template",
            default=None,
            help="The commands to run",
        )
        self.logging_configured = False

    def main(self):
        cmd.add_filenames_arguments(self.parser)
        super().main()
        for filename in cmd.get_filenames(self.args):
            self.process_filename(filename)

    def process_filename(self, filename: str):
        dialect = self.args.dialect
        if self.args.sniff:
            dialect = "sniff"
        elif dialect is None:
            dialect = "unix"

        if not hasattr(open, "newlines"):
            universal_newline = False
        elif self.args.universal_newline is not None:
            universal_newline = True
        elif self.args.no_universal_newline is not None:
            universal_newline = False
        elif dialect == "rovi":
            universal_newline = True
        else:
            universal_newline = None
        file_handle = open_file_or_stdin(
            filename, self.args.encoding, universal_newline=universal_newline
        )
        self.process_file_handle(filename, file_handle, dialect)

    def process_file_handle(self, filename: str, file_handle: TextIO, dialect: str):
        if not self.logging_configured:
            self.logging_configured = True
            if self.args.verbose:
                easy_initialize_logging("DEBUG", stream=sys.stderr)
            else:
                easy_initialize_logging("INFO", stream=sys.stderr)
        logger.debug(f"Processing {filename} via {file_handle}")

        template = self.args.template
        if (template is None or not len(template)) and dialect == "sniff":
            template = "sniff"

        if filename == "-":
            if dialect == "sniff" and template != "sniff":
                raise Exception(
                    "Cannot sniff stdin and perform other actions besides sniff"
                )
        process(file_handle, dialect, self.args.has_header, template=template)


if __name__ == "__main__":
    Main().main()
