#!/usr/bin/env python-venv
import os
import os.path
import re
import signal
import sys
import pathlib
from argparse import ArgumentParser


class Stop:
    stopped = False


def interrupt_handler(signum, frame):
    Stop.stopped = True
    sys.exit(0)


def process_gitignore(path: str):
    excludes = set()
    if os.path.isfile(path):
        with open(path, "r") as gitignore:
            for line in gitignore.readlines():
                if Stop.stopped:
                    return
                line = re.sub("#.*", "", line).strip()
                if len(line):
                    excludes.add(line)
    return excludes


def main():
    """Strip $Id$ and stuff."""
    parser = ArgumentParser()
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbose",
        action="store_true",
        default=False,
        help="verbose is more verbose",
    )
    parser.add_argument(
        "-r",
        "--regex",
        dest="regex",
        action="store_true",
        default=False,
        help="treat the find string as a regex",
    )
    parser.add_argument("find")
    parser.add_argument("replacement")
    parser.add_argument("filenames", nargs="*")

    args = parser.parse_args()
    find = args.find
    regex = args.regex
    replacement = args.replacement
    verbose = args.verbose

    filenames = args.filenames
    if not filenames:
        filenames = ["."]

    excludes = process_gitignore(".gitignore")
    excludes.update(process_gitignore("~/.gitignore"))

    for filename in filenames:
        check_filename(find, regex, replacement, filename, verbose, excludes)


def check_filename(find, regex, replacement, filename, verbose, excludes):
    if os.path.isdir(filename):
        check_dir(find, regex, replacement, filename, verbose, excludes)
    if os.path.isfile(filename):
        clean_file(find, regex, replacement, filename, verbose)


def check_dir(find, regex, replacement, path, verbose, excludes):
    for root, dirs, files in os.walk(path, topdown=True):
        for subfilename in files:
            if Stop.stopped:
                return
            if subfilename.startswith("."):
                continue
            subpath = os.path.join(root, subfilename)
            process = True
            for exclude in excludes:
                if pathlib.PurePath(subpath).match(exclude):
                    # print(f"skipping {subpath} because it matches {exclude}")
                    process = False
                    break
            if process:
                clean_file(find, regex, replacement, subpath, verbose)


def clean_file(find, regex, replacement, filename, verbose):
    file_size = os.path.getsize(filename)
    try:
        with open(filename) as f:
            original_contents = f.read(file_size)
            contents = original_contents
    except:
        return
    if regex:
        contents = re.sub(find, replacement, contents)
    else:
        contents = contents.replace(find, replacement)
    changed = contents != original_contents
    if changed:
        if verbose:
            sys.stdout.write("updated file %s" % filename)
        with open(filename, "w") as f:
            f.write(contents)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, interrupt_handler)
    main()
