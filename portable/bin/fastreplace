#!/usr/bin/env -S python-venv --virtualenv dotfiles

import logging
import os.path
import pathlib
import re

from jmullan.cmd import cmd
from jmullan.cmd.cmd import Jmullan
from jmullan.logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)


def process_gitignore(path: str) -> set[str]:
    excludes = set()
    if os.path.isfile(path):
        with open(path, "r") as gitignore:
            for line in gitignore.readlines():
                if not Jmullan.GO:
                    return excludes
                line = re.sub(r"^\s*#+.*", "", line).strip()
                if len(line):
                    excludes.add(line)
    return excludes


class Main(cmd.Main):
    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "-r",
            "--regex",
            dest="regex",
            action="store_true",
            default=False,
            help="treat the find string as a regex",
        )
        self.parser.add_argument("find")
        self.parser.add_argument("replacement")
        self.parser.add_argument("filenames", nargs="*")

    def setup(self):
        super().setup()
        if self.args.verbose:
            easy_initialize_logging("DEBUG")
        else:
            easy_initialize_logging()

    def main(self):
        super().main()
        find = self.args.find
        regex = self.args.regex
        replacement = self.args.replacement

        filenames = self.args.filenames
        if not filenames:
            filenames = ["."]

        excludes = process_gitignore(".gitignore")
        if not Jmullan.GO:
            return
        excludes.update(process_gitignore("~/.gitignore"))
        if not Jmullan.GO:
            return
        excludes.add(".git")

        for filename in filenames:
            if not Jmullan.GO:
                return
            check_filename(find, regex, replacement, filename, excludes)


def check_filename(find, regex, replacement, filename, excludes):
    if not Jmullan.GO:
        return
    if os.path.isdir(filename):
        check_dir(find, regex, replacement, filename, excludes)
    if os.path.isfile(filename):
        clean_file(find, regex, replacement, filename)


def allow_path(root: str, path: str, excludes: set[str]) -> bool:
    if path is None or not len(path):
        return False
    for exclude in excludes:
        if not Jmullan.GO:
            return False
        if path.startswith("."):
            return False
        if pathlib.PurePath(path).match(exclude):
            return False
        subpath = os.path.join(root, path)
        return not pathlib.PurePath(subpath).match(exclude)
    return True


def filter_paths(root: str, paths: list[str], excludes: set[str]) -> list[str]:
    return [p for p in paths if allow_path(root, p, excludes)]


def check_dir(find, regex, replacement, path, excludes):
    if not Jmullan.GO:
        return
    for root, dirs, files in os.walk(path, topdown=True):
        if not Jmullan.GO:
            return
        dirs[:] = filter_paths(root, dirs, excludes)
        for sub_filename in filter_paths(root, files, excludes):
            if not Jmullan.GO:
                return
            subpath = os.path.join(root, sub_filename)
            process = True
            for exclude in excludes:
                if not Jmullan.GO:
                    return
                if pathlib.PurePath(subpath).match(exclude):
                    # print(f"skipping {subpath} because it matches {exclude}")
                    process = False
                    break
            if process:
                clean_file(find, regex, replacement, subpath)


def clean_file(find, regex, replacement, filename):
    if not Jmullan.GO:
        return
    try:
        file_size = os.path.getsize(filename)
    except FileNotFoundError:
        return
    try:
        with open(filename) as f:
            original_contents = f.read(file_size)
            contents = original_contents
    except Exception:
        return
    if not Jmullan.GO:
        return
    if regex:
        contents = re.sub(find, replacement, contents)
    else:
        contents = contents.replace(find, replacement)
    if not Jmullan.GO:
        return
    changed = contents != original_contents
    if changed:
        logger.debug(f"Updated file {filename}")
        with open(filename, "w") as f:
            f.write(contents)


if __name__ == "__main__":
    Main().main()
