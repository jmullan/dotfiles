#!/usr/bin/env -S uv --quiet run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "pyyaml",
#     "jmullan.cmd@git+https://github.com/jmullan/jmullan.cmd",
#     "jmullan.logging@git+https://github.com/jmullan/jmullan.logging"
# ]
# ///
import json
import logging
import os.path
import re
import sys
from typing import TextIO, Any

import yaml
from jmullan.cmd import cmd
from jmullan.logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)


def flatten_nested(data: Any, prefix: str | None = None) -> dict[str, str]:
    """Adds dots to all nested fields in dictionaries.

    Entries with different forms of nesting update.
    {"a": {"b": {"c": 4}} -> {"a.b.c": 4}
    {"a": {"b": 1}, "a.b": 2} -> {"a.b": 2}
    """
    output: dict[str, str] = {}
    if isinstance(data, dict):
        for k, v in data.items():
            if v is None:
                continue
            elif v == 'True':
                v = True
            elif v == 'False':
                v = False
            elif isinstance(v, str) and re.match(r"^(0|-?[1-9]+[0-9]*)$", v):
                v = int(v)
            elif isinstance(v, str) and re.match(r"^((0|[1-9]+[0-9]*)\.[0-9]+)$", v):
                v = float(v)

            if prefix is None or not len(prefix):
                key = f"{k}"
            else:
                key = f"{prefix}.{k}"
            subdata = flatten_nested(v, key)
            if subdata:
                output.update(subdata)
    else:
        if prefix is not None and len(prefix) and data is not None:
            output[prefix] = data
    return {k: v for k, v in sorted(output.items(), key=lambda k: f'{k[0]}={k[1]!s}')}


def un_flatten(data: Any) -> dict[str, str]:
    """Turns dots into a nested structure"""
    if data is None:
        return {}
    output = {}
    for key, value in data.items():
        if "." in key:
            parts = key.split(".")
            sub_output = output
            while len(parts) > 1:
                part = parts.pop(0)
                if part not in sub_output:
                    sub_output[part] = {}
                sub_output = sub_output[part]
            part = parts[0]
            sub_output[part] = value
        else:
            output[key] = value
    return output


def read_properties(file_handle: TextIO) -> list[dict]:
    data = []
    document = {}
    file_handle.seek(0)
    lines = file_handle.readlines()
    lines.append("#---")
    for line in lines:
        line = line.strip()
        if not len(line):
            continue
        if line in ("!---", "#---", "---"):
            if document:
                data.append(flatten_nested(document))
            document = {}
            continue
        parts = line.split("=", 1)
        if len(parts) > 1 and parts[1] is not None:
            document[parts[0]] = parts[1]
    return data


def handle_replacements(document: dict[str, Any], replacements: dict[str, str]) -> dict[str, Any]:
    updated = {}
    for k, v in document.items():
        replacement = replacements.get(k, k)
        updated[replacement] = v
    return updated


class Main(cmd.ContentsProcessor):

    def process_contents(self, file_handle: TextIO) -> None:
        data: list[dict[str, Any]] | None = None
        try:
            data = list(yaml.safe_load_all(file_handle) or [])
        except Exception:
            logger.warning("Could not process as yaml")
            pass
        if data is None:
            # fall back to json
            try:
                file_handle.seek(0)
                data = json.load(file_handle)
            except Exception:
                logger.warning("Could not process as json")
                pass

        if data is None:
            data = read_properties(file_handle)
        if not data:
            logger.warning("No data was loaded.")
            return

        documents = [flatten_nested(document) for document in data if document]
        if self.args.replacements_file:
            replacements = {}
            with cmd.open_file_or_stdin(self.args.replacements_file) as replacements_handle:
                replacements_documents = read_properties(replacements_handle)
                for replacements_document in replacements_documents:
                    if replacements_document:
                        for k, v in replacements_document.items():
                            replacements[k] = v
            documents = [handle_replacements(document, replacements) for document in documents if document]

        if self.args.output_format == "properties":
            logger.debug("Making a properties file")
            logger.debug(f"Found {len(data)} documents")
            for document in documents:
                if len(documents) > 1:
                    print("#---")
                if document is None:
                    logger.debug("Document is None")
                    continue
                flattened = document
                if flattened is None:
                    logger.warning("Flattened document is None")
                logger.debug(f"Found {len(flattened)} items")
                for k, v in flattened.items():
                    print(f"{k!s}={v!s}")
        elif self.args.output_format == "yaml":
            logger.debug("Making a yaml file")
            for document in data:
                if not document:
                    continue
                if len(data) > 1:
                    print("---")
                flattened = un_flatten(document)
                if flattened:
                    print(yaml.dump(flattened, indent=self.args.indent))

    def process_filename(self, filename: str):
        with cmd.open_file_or_stdin(filename) as handle:
            self.process_contents(handle)


    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--output-format",
            dest="output_format",
            required=False,
            default="yaml",
            choices=["yaml", "properties", "json"],
            help=""
        )
        self.parser.add_argument(
            "--indent",
            dest="indent",
            required=False,
            default=4,
            type=int
        )
        self.parser.add_argument(
            "--replacements-file",
            dest="replacements_file",
            required=False,
            default=None
        )

    def setup(self):
        super().setup()
        if self.args.verbose:
            easy_initialize_logging("DEBUG", stream=sys.stderr)
        else:
            easy_initialize_logging("INFO", stream=sys.stderr)
        if self.args.replacements_file is not None:
            if not os.path.exists(self.args.replacements_file):
                logger.error(
                    "Cannot find specified replacements file: %s",
                         self.args.replacements_file)
                exit(1)

if __name__ == "__main__":
    Main().main()
