#!/usr/bin/env -S python-venv --virtualenv dotfiles

import logging
import sys

import emoji
from jmullan_cmd import cmd
from jmullan_logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)


def add_missing_colons(string: str) -> str:
    if string is None or len(string) == 0:
        return ""
    if string.startswith(":") or string.endswith(":"):
        return string
    return f":{string}:"


def demojize(string: str) -> str:
    return emoji.demojize(string, language="alias")


def emojize(string: str, colonize: bool = False) -> str:
    if colonize:
        colonized = add_missing_colons(string)
        emojized = emoji.emojize(colonized, language="alias")
        if emojized != colonized:
            return emojized
    return emoji.emojize(string, language="alias")


class Main(cmd.Main):
    """TODO: This should work for more than just prompt-timing cases."""

    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--trailing-space",
            dest="trailing_space",
            action="store_true",
            default=False,
            help="Add a trailing space if there is output",
        )
        self.parser.add_argument(
            "--no-newline",
            dest="no_newline",
            action="store_true",
            default=False,
            help="Do not add a newline at end",
        )
        self.parser.add_argument(
            "--colonize",
            dest="colonize",
            action="store_true",
            default=False,
            help="Wrap words in colons if they don't have them",
        )
        self.parser.add_argument(
            "--demojize",
            dest="demojize",
            action="store_true",
            default=False,
            help="If given an emoji, figure out its name",
        )
        self.parser.add_argument(
            "strings",
            nargs="+",
            help="Try to turn these strings into emojis",
        )

    def main(self):
        super().main()
        if self.args.verbose:
            easy_initialize_logging("DEBUG", stream=sys.stderr)
        else:
            easy_initialize_logging("INFO", stream=sys.stderr)
        colonize = self.args.colonize
        trailing_space = self.args.trailing_space
        use_newline = not self.args.no_newline
        strings: list[str] | None = [x.strip() for x in self.args.strings]
        strings = [x for x in strings if len(x) > 0]
        if not strings:
            logger.debug("No strings provided, exiting")
            return
        if self.args.demojize:
            emojis = [demojize(x) for x in strings]
        else:
            emojis = [emojize(x, colonize) for x in strings]
        output = " ".join(emojis)
        if trailing_space:
            output = f"{output} "
        if use_newline:
            output = f"{output}\n"
        print(output, end="")


if __name__ == "__main__":
    Main().main()
