#!/usr/bin/env -S python-venv --virtualenv dotfiles
import argparse
import dataclasses
import json
import logging
import os.path
from argparse import Namespace, ArgumentParser, ArgumentError

import requests
from jmullan.cmd import cmd
from jmullan.logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)


@dataclasses.dataclass
class Artifact:
    base_url: str
    project: str
    repository: str
    data: dict

    @property
    def tags(self) -> list[str]:
        return [tag["name"] for tag in (self.data.get("tags") or [])]

    @property
    def label_schemas(self) -> dict[str, str]:
        extra_attrs = self.data.get("extra_attrs") or {}
        config = extra_attrs.get("config") or {}
        labels: dict[str, str] = config.get("Labels") or {}
        return {
            k.removeprefix("org.label-schema."): v
            for k, v in labels.items()
            if k.startswith("org.label-schema.")
        }

    @property
    def urls(self) -> list[str]:
        # harbor-registry.savagebeast.com/savagebase/python-sb:3.6.5-stretch-sb0.0.5
        return [
            f"{self.base_url}/{self.project}/{self.repository}:{tag}"
            for tag in self.tags
        ]


class UrlAction(argparse.Action):
    def __call__(
        self,
        parser: ArgumentParser,
        namespace: Namespace,
        values: str | None,
        option_string: str | None = None,
    ):
        if values is None:
            parser.error("Please enter a valid url.")
        values = values.lstrip()
        if not len(values):
            parser.error("Please enter a valid url.")
        if not values.startswith("http://") and not values.startswith("https://"):
            parser.error("Your url must start with http:// or https://")
        setattr(namespace, self.dest, values)


query_help = """Supported query patterns are:
key=value: exact match
key=~value: fuzzy match
k=[min~max]: range match
k={v1 v2 v3}: match all? of the values (union)
k=(v1 v2 v3): match any? of the values (intersection)

The value of range and list can be string(enclosed by " or '), integer or time (in format "2020-04-09 02:36:00").
"""


class Main(cmd.Main):
    """Check a harbor registry for docker images."""

    def __init__(self):
        super().__init__()
        easy_initialize_logging()
        self.url_action = self.parser.add_argument(
            "--url",
            dest="url",
            default=os.environ.get("HARBOR_REGISTRY_URL"),
            action=UrlAction,
            help="What base url to use to look for docker images in harbor",
        )
        self.project_action = self.parser.add_argument(
            "--project",
            dest="project",
            required=True,
            help="What project to use when searching for images",
        )
        self.repository_action = self.parser.add_argument(
            "--repository",
            dest="repository",
            required=True,
            help="What repository to use when searching for images",
        )
        self.queries_action = self.parser.add_argument(
            "--query", dest="queries", nargs="*", help=query_help
        )
        self.page_action = self.parser.add_argument(
            "--page", dest="page", required=False, default=0, help="Start on this page"
        )
        self.page_action = self.parser.add_argument(
            "--page-size",
            dest="page_size",
            required=False,
            default=10,
            help="Request this many per page",
        )

    def main(self):
        super().main()
        if not self.args.url:
            raise ArgumentError(self.url_action, "Missing harbor url")
        if not self.args.project:
            raise ArgumentError(self.project_action, "Missing project")
        if not self.args.repository:
            raise ArgumentError(self.repository_action, "Missing repository")
        url = f"{self.args.url}/api/v2.0/projects/{self.args.project}/repositories/{self.args.repository}/artifacts"
        params = {
            "page": self.args.page,
            "page_size": self.args.page_size,
            "with_tag": "true",
            "with_label": "true",
        }
        query_param = []
        if self.args.queries:
            for query in self.args.queries:
                if query is None:
                    continue
                query = query.lstrip()
                if len(query) == 0:
                    continue
                if "=" not in query:
                    raise ArgumentError(self.queries_action, f"Invalid query: {query}")
                query_param.append(query)
        if query_param:
            params["q"] = ",".join(query_param)
        response = requests.get(url, params=params)
        data = response.json()
        artifacts = [
            Artifact(self.args.url, self.args.project, self.args.repository, a)
            for a in data
        ]
        print(f"{self.args.project} {self.args.repository}")
        for artifact in artifacts:
            print(f"{artifact.data['id']} {artifact.label_schemas}")
            for artifact_url in artifact.urls:
                print(f"    {artifact_url}")
            print(f"{json.dumps(artifact.data, indent=4)}")


if __name__ == "__main__":
    Main().main()
