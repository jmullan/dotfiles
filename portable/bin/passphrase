#!/usr/bin/env python
import argparse
import logging
import random
import re
import sys

logger = logging.getLogger(__name__)

FILENAME = '/usr/share/dict/words'


class Generator(object):
    def __init__(self, options):
        self.options = options
        self.password = None
        self.passphrase = None

    def fails(self):
        logger.debug('trying %r', self.password)
        if self.password is None:
            return True
        password_length = len(self.password)
        minimum_length = self.options.get('minimum_password_length')
        maximum_length = self.options.get('maximum_password_length')
        if (
                password_length < minimum_length and
                password_length > maximum_length
        ):
            logger.debug('Password wrong length')
            return True
        lowercase = sum(1 for c in self.password if c.islower())
        if lowercase < self.options.get('minimum_lowercase'):
            logger.debug('Not enough regular characters.')
            return True
        uppercase = sum(1 for c in self.password if c.isupper())
        if uppercase < self.options.get('minimum_uppercase'):
            logger.debug('Not enough uppercase characters.')
            return True
        numeric = sum(1 for c in self.password if c.isdigit())
        if numeric < self.options.get('minimum_numeric'):
            logger.debug('Not enough numbers.')
            return True
        special = password_length - lowercase - uppercase - numeric
        if special < self.options.get('minimum_special'):
            logger.debug('Not enough special characters.')
            return True
        if special > self.options.get('maximum_special'):
            logger.debug('Too many special characters.')
            return True
        return False

    def generate(self):
        words = open(FILENAME).readlines()
        output = []
        while len(output) < 3:
            key = random.randint(0, len(words) - 1)
            word = words[key]
            if re.search('^[A-Za-z]+$', word):
                output.append(word.strip())

        chosen_words = output[0:3]
        passphrase = ' '.join(chosen_words)
        character_classes = [
            ''.join(chr(x) for x in range(97, 123)),
            ''.join(chr(x) for x in range(65, 91)),
            ''.join(chr(x) for x in range(48, 58))
        ]
        if self.options.get('minimum_special'):
            special = self.options.get('special')
            logger.debug('Adding special characters: %r', special)
            character_classes.append(''.join(special))

        characters = ''.join(character_classes)
        if (
                self.options.get('minimum_password_length') ==
                self.options.get('maximum_password_length')
        ):
            password_length = self.options.get('minimum_password_length')
        else:
            password_length = random.randint(
                self.options.get('minimum_password_length'),
                self.options.get('maximum_password_length'))

        self.password = None
        while self.fails():
            self.password = ''
            for _ in range(0, password_length):
                self.password += characters[
                    random.randint(0, len(characters) - 1)]

        assert len(self.password) == password_length
        return self.password, passphrase


def main():
    """
    Dispatch the checker from the command line.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--length',
        dest='length',
        help='force this password length',
        type=int,
        default=None
    )
    parser.add_argument(
        '--minimum-length',
        dest='minimum_password_length',
        help='minimum length of pass phrase to generate',
        type=int,
        default=10
    )
    parser.add_argument(
        '--maximum-length',
        dest='maximum_password_length',
        help='maximum length of pass phrase to generate',
        type=int,
        default=None
    )
    parser.add_argument(
        '--minimum-lowercase',
        dest='minimum_lowercase',
        help='generate at least this many lowercase characters',
        type=int,
        default=1
    )
    parser.add_argument(
        '--minimum-uppercase',
        dest='minimum_uppercase',
        help='generate at least this many uppercase characters',
        type=int,
        default=1
    )
    parser.add_argument(
        '--minimum-numeric',
        dest='minimum_numeric',
        help='generate at least this many uppercase characters',
        type=int,
        default=1
    )
    parser.add_argument(
        '--minimum-special',
        dest='minimum_special',
        help='generate at least this many special characters',
        type=int,
        default=1
    )
    parser.add_argument(
        '--maximum-special',
        dest='maximum_special',
        help='generate at most this many special characters',
        type=int,
        default=1
    )
    parser.add_argument(
        '--special',
        dest='special',
        help='what characters are used for special characters',
        type=str,
        default='-_!@#$%^&*()+=,./|'
    )
    parser.add_argument(
        '--word',
        dest='word',
        help='only make a word',
        action='store_true',
        default=False
    )
    parser.add_argument(
        '--phrase',
        dest='phrase',
        action='store_true',
        help='only make a phrase',
        default=False
    )
    parser.add_argument(
        '-v', '--verbose', dest='verbose',
        action='store_true', default=False,
        help='verbose is more verbose'
    )
    options = vars(parser.parse_args())
    if options.get('verbose'):
        logging.basicConfig(level=logging.DEBUG)
    if (
            options.get('minimum_password_length') is None and
            options.get('length') is not None
    ):
        options['minimum_password_length'] = options.get('length')
    if (
            options.get('maximum_password_length') is None and
            options.get('length') is not None
    ):
        options['maximum_password_length'] = options.get('length')

    if (
            options.get('maximum_password_length') is None and
            options.get('minimum_password_length') is not None
    ):
        options['maximum_password_length'] = options.get(
            'minimum_password_length')

    if (
            options.get('minimum_password_length') >
            options.get('maximum_password_length')
    ):
        raise ValueError(
            'Minimum password length must be'
            ' less than or equal to the maximum')
    if (
            options.get('minimum_password_length') < 1 or
            options.get('maximum_password_length') < 1
    ):
        raise ValueError(
            'Password length must be 1 or more')
    if (
            options.get('minimum_special') >
            options.get('maximum_special')
    ):
        raise ValueError(
            'Minimum special requirement must be'
            ' less than or equal to the maximum')
    generator = Generator(options)
    password, passphrase = generator.generate()
    if not options['phrase']:
        sys.stdout.write("%s\n" % password)
    if not options['word']:
        sys.stdout.write("%s\n" % passphrase)
    if options['phrase'] and options['word']:
        sys.stdout.write("%s\n" % password)
        sys.stdout.write("%s\n" % passphrase)

if __name__ == "__main__":
    main()
