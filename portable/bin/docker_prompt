#!/usr/bin/env python-venv
import dataclasses
import json
import logging
import os
import subprocess
import sys
import httpx

from colorist import Color
from jmullan_cmd import cmd
from jmullan_logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)

DEFAULT_DOCKER_PATH = "/var/run/docker.sock"


class DataclassesJsonEncoder(json.JSONEncoder):
    def default(self, o):
        if dataclasses.is_dataclass(o):
            return {x: y for x, y in dataclasses.asdict(o).items() if y is not None}
        return super().default(o)


def get_remotes():
    command = ["git", "remote"]
    with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, encoding="UTF8") as proc:
        return [x for x in [line.strip() for line in proc.stdout.readlines()] if len(x)]

def check_docker_socket(socket_path: str) -> bool:
    transport = httpx.HTTPTransport(uds=socket_path)
    client = httpx.Client(transport=transport)
    response = client.get('http://http/_ping')
    return response.status_code == 200


def socket_path_from_docker_host_env() -> str | None:
    docker_host = os.environ.get("DOCKER_HOST")
    if docker_host:
        if docker_host.startswith("unix://"):
            return docker_host.removeprefix("unix://")
    return None


def docker_running() -> bool:
    sockets = {x for x in {
        DEFAULT_DOCKER_PATH,
        socket_path_from_docker_host_env()
    } if x is not None and os.path.exists(x)}
    for socket in sockets:
        if check_docker_socket(socket):
            return True
    return False



def print_word(word: str, color: Color | None = None):
    if word is None:
        return
    if color is None:
        print(word, end="")
    else:
        print(f"{color}{word}{Color.DEFAULT}", end="")


class Main(cmd.Main):
    def __init__(self):
        super().__init__()


    def main(self):
        super().main()
        if self.args.verbose:
            easy_initialize_logging("DEBUG", stream=sys.stderr)
        else:
            easy_initialize_logging("INFO", stream=sys.stderr)
        httpx_logging = logging.getLogger("httpx")
        httpx_logging.setLevel("WARN")

        print_word(" ")
        if docker_running():
            print_word(u"\U0001F6A2", Color.GREEN)
        else:
            print_word("NO DOCKER", Color.RED)

        print_word("")



if __name__ == "__main__":
    Main().main()
