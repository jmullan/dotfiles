#!/usr/bin/env python-venv
import dataclasses
import json
import logging
import os
import subprocess
import sys

from jmullan_cmd import cmd
from jmullan_logging.easy_logging import easy_initialize_logging

logger = logging.getLogger(__name__)

DEFAULT_DOCKER_PATH = "/var/run/docker.sock"

# colorist is too slow to import
COLORS = {
    'Color.DEFAULT': '\x1b[39m',
    'Color.GREEN': '\x1b[32m',
    'Color.RED': '\x1b[31m'
}

class DataclassesJsonEncoder(json.JSONEncoder):
    def default(self, o):
        if dataclasses.is_dataclass(o):
            return {x: y for x, y in dataclasses.asdict(o).items() if y is not None}
        return super().default(o)


def get_remotes():
    command = ["git", "remote"]
    with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, encoding="UTF8") as proc:
        return [x for x in [line.strip() for line in proc.stdout.readlines()] if len(x)]


def check_docker_socket(socket_path: str) -> bool:
    import httpx
    transport = httpx.HTTPTransport(uds=socket_path)
    client = httpx.Client(transport=transport)
    response = client.get('http://http/_ping', timeout=0.1)
    return response.status_code == 200


def socket_path_from_docker_host_env() -> str | None:
    docker_host = os.environ.get("DOCKER_HOST")
    if docker_host:
        if docker_host.startswith("unix://"):
            return docker_host.removeprefix("unix://")
    return None


def docker_running() -> bool:
    sockets = {x for x in {
        DEFAULT_DOCKER_PATH,
        socket_path_from_docker_host_env()
    } if x is not None and os.path.exists(x)}
    for socket in sockets:
        if check_docker_socket(socket):
            return True
    return False


def print_word(word: str, color: str | None = None):
    if word is None:
        return
    if color is None:
        print(word, end="")
    else:
        print(f"{color}{word}{COLORS['Color.DEFAULT']}", end="")


class Main(cmd.Main):
    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--require-docker",
            dest="require_docker",
            action="store_true",
            default=os.environ.get("REQUIRE_DOCKER", False),
            required=False,
            help="Set REQUIRE_DOCKER=true to enable this part of the prompt",
        )

    def main(self):
        super().main()
        if self.args.verbose:
            easy_initialize_logging("DEBUG", stream=sys.stderr)
        else:
            easy_initialize_logging("INFO", stream=sys.stderr)
        if not self.args.require_docker:
            logger.debug("Docker is not enabled")
            exit(0)
        httpx_logging = logging.getLogger("httpx")
        httpx_logging.setLevel("WARN")

        print_word(" ")
        if docker_running():
            print_word(u"\U0001F6A2", COLORS["Color.GREEN"])
        else:
            print_word("NO DOCKER",  COLORS["Color.RED"])
        print_word("")



if __name__ == "__main__":
    Main().main()
