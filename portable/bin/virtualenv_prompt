#!/bin/bash
if [ "${DEBUG_PROMPT}" == "true" ] ; then
   set -x
fi
VIRTUALENVWRAPPER=$(which virtualenvwrapper.sh)
EXPECTED_VENV=
ACTUAL_VENV=
VENV_FILE=$(find_up .venv)
PYTHON_VERSION=$(python --version | sed 's/Python //' | sed 's/\.[0-9]*$//' || echo 'v')
EXPECTED_PYTHON=""
SNAKE=$(echo -e "\xf0\x9f\x90\x8d")
if [ -n "${VENV_FILE}" ] ; then
    EXPECTED_VENV=$(head -n 1 "${VENV_FILE}")
    EXPECTED_PYTHON=$(tail -n +2 "${VENV_FILE}" | head -n 1)
fi
if [ -n "${EXPECTED_PYTHON}" ] ; then
    if [ -e "${HOME}/.pyenv/versions/${EXPECTED_PYTHON}/bin/python" ] ; then
        VERSION="${HOME}/.pyenv/versions/${EXPECTED_PYTHON}/bin/python"
    else
        VERSION=$(glob "${HOME}/.pyenv/versions/${EXPECTED_PYTHON}*/bin/python" | sort -Vr | head -n 1)
    fi
fi
COMMAND="mkvirtualenv ${EXPECTED_VENV}"
"${VERSION}" -m venv -h >/dev/null 2>/dev/null
if [ $? -eq 0 ]; then
    COMMAND="${VERSION} -m venv ~/.virtualenvs/${EXPECTED_VENV}"
    VERSION=
fi
if [[ ${EXPECTED_VENV:0:1} == "/" ]] ; then
    if [ -e "${EXPECTED_VENV}/bin/activate" ] ; then
        AVAILABLE_VENV="${EXPECTED_VENV}"
    else
        AVAILABLE_VENV=
    fi
else
    if [ -e "${WORKON_HOME}/${EXPECTED_VENV}" ] ; then
        AVAILABLE_VENV="${EXPECTED_VENV}"
    else
        AVAILABLE_VENV=
    fi
fi

if [ -n "${VIRTUAL_ENV}" ]; then
    if [[ ${EXPECTED_VENV:0:1} == "/" ]] ; then
        ACTUAL_VENV="${VIRTUAL_ENV}"
    else
      # Strip out the path and just leave the env name
      ACTUAL_VENV="${VIRTUAL_ENV##*/}"
    fi
fi

if [ -z "${ACTUAL_ENV}${EXPECTED_VENV}" ] ; then
    exit
fi

echo -n ' ('
if [ -z "${VIRTUALENVWRAPPER_SCRIPT}" ] ; then
    if [ -e ~/.virtualenvs ] ; then
        if [ -z "${VIRTUALENVWRAPPER}" ] ; then
            echo -n "$(tput setaf 1)"
            echo -n "sudo pip install virtualenvwrapper"
        else
            echo -n "$(tput setaf 3)"
            echo -n "source ${VIRTUALENVWRAPPER}"
        fi
        echo -n "$(tput sgr0)"
    else
        echo -n "$(tput setaf 1)"
        echo -n "mkdir -p "~/.virtualenvs
        echo -n "$(tput sgr0)"
    fi
else
    if [ -n "${EXPECTED_VENV}" ] ; then
        if [ -n "${ACTUAL_VENV}" ] ; then
            if [ "${ACTUAL_VENV}" == "${EXPECTED_VENV}" ] ; then
                echo -n "${SNAKE}${ACTUAL_VENV}:${PYTHON_VERSION}"
            else
                if [ -n "${AVAILABLE_VENV}" ] ; then
                    if [[ ${EXPECTED_VENV:0:1} == "/" ]] ; then
                        echo -n "$(tput setaf 1)"
                        echo -n "INCORRECT VENV ${ACTUAL_VENV} : source ${EXPECTED_VENV}/bin/activate"
                        echo -n "$(tput sgr0)"
                    else
                        echo -n "$(tput setaf 1)"
                        echo -n "INCORRECT VENV ${ACTUAL_VENV} : workon ${EXPECTED_VENV}"
                        echo -n "$(tput sgr0)"
                    fi
                else
                    echo -n "$(tput setaf 1)"
                    echo -n "INCORRECT VENV ${ACTUAL_VENV} : deactivate"
                    echo -n "$(tput sgr0)"
                fi
            fi
        else
            if [ -z "${AVAILABLE_VENV}" ] ; then
                echo -n "$(tput setaf 1)"
                echo -n "${COMMAND}"
                if [ -n "${VERSION}" ] ; then
                    echo -n " --python ${VERSION}"
                fi
                echo -n "$(tput sgr0)"
            else
                if [[ ${EXPECTED_VENV:0:1} == "/" ]] ; then
                    echo -n "$(tput setaf 3)"
                    echo -n "source ${EXPECTED_VENV}/bin/activate"
                    echo -n "$(tput sgr0)"

                else
                    echo -n "$(tput setaf 3)"
                    echo -n "workon ${EXPECTED_VENV}"
                    echo -n "$(tput sgr0)"
                fi
            fi
        fi
    else
        if [ -n "${ACTUAL_VENV}" ] ; then
            if [ -z "${AVAILABLE_VENV}" ] ; then
                echo -n "$(tput setaf 1)"
                echo -n "${COMMAND}"
                if [ -n "${VERSION}" ] ; then
                    echo -n " --python ${VERSION}"
                fi
                echo -n "$(tput sgr0)"
            else
                echo -n " ${SNAKE}${ACTUAL_VENV}:${PYTHON_VERSION}: "
            fi
        fi
    fi
fi
echo -n ') '

if [ "${DEBUG_PROMPT}" == "true"  ] ; then
   set +x
fi
