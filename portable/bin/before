#!/usr/bin/env -S uv --quiet run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "jmullan_cmd@git+https://github.com/jmullan/jmullan_cmd"
# ]
# ///
"""Stream through a file or files and print lines until a string is found or a regex is matched."""
import re
from typing import TextIO

from jmullan_cmd import cmd


def search(pattern: re.Pattern, file_handle: TextIO, inclusive: bool):
    for line in file_handle:
        if pattern.search(line) is not None:
            if inclusive:
                print(line, end="")
            break
        else:
            print(line, end="")


class Main(cmd.TextIoProcessor):
    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--inclusive",
            dest="inclusive",
            action="store_true",
            default=False,
            help="include the string we are seeking",
        )
        self.parser.add_argument(
            "-i",
            "--insensitive",
            "--case-insensitive",
            dest="insensitive",
            action="store_true",
            default=False,
            help="search for the string ignoring case",
        )
        self.parser.add_argument(
            "-r",
            "--regex",
            dest="regex",
            action="store_true",
            default=False,
            help="treat the search string as a regex",
        )
        self.parser.add_argument("search", help="what to search for")

    def process_file_handle(self, filename: str, file_handle: TextIO):
        if self.args.search is None or self.args.search == "":
            raise ValueError("You must search for a non-empty string")

        if not self.args.regex:
            regex = re.escape(self.args.search)
        else:
            regex = self.args.search
        if self.args.insensitive:
            pattern = re.compile(regex, re.IGNORECASE)
        else:
            pattern = re.compile(regex)

        search(pattern, file_handle, self.args.inclusive)


if __name__ == "__main__":
    Main().main()
