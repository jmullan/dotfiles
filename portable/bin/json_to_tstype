#!/usr/bin/env python-venv
import json
from typing import TextIO

from jmullan_cmd import cmd

L = "{"
R = "}"


def to_camel(value: str):
    return "".join(v[0].upper() + v[1:] for v in value.split("_"))


def get_keys(value: dict):
    return ",".join(sorted(value.keys()))


class TypeCollector:
    def __init__(self):
        self.index = 0
        self.keyses = set()
        self.values = {}
        self.names = {}
        self.fieldnames = {}

    def next_name(self):
        name = f"Something{self.index}"
        self.index = self.index + 1
        return name

    def best_name(self, data: dict):
        keys = get_keys(data)
        fieldnames = self.fieldnames.get(keys) or []
        if len(fieldnames) == 1:
            return to_camel(list(fieldnames)[0])
        return self.next_name()

    def to_tstype(self, data: dict):
        name = self.best_name(data)
        header = ["/**", f" * @typedef {L}object{R} {name}"]
        footer = [" */"]

        type_data = []
        for key, value in data.items():
            type_hint = self.type_name(value)
            if isinstance(value, bool):
                dumped = str(value).lower()
            else:
                try:
                    dumped = json.dumps(value)
                    if len(dumped) > 60:
                        dumped = dumped[0:60] + "..."
                except Exception:
                    dumped = repr(value)
            if dumped is not None and dumped.startswith("[") or dumped.startswith("{"):
                dumped = f"# {dumped}"
            type_datum = f" * @property {L}{type_hint}{R} {key} {dumped}"
            type_data.append(type_datum)

        type_data = header + type_data + footer
        return "\n".join(type_data)

    def type_name(self, value) -> str:
        if isinstance(value, dict) and value:
            return self.best_name(value)

        if isinstance(value, bool):
            return "boolean"
        if isinstance(value, str):
            return "string"
        if isinstance(value, int):
            return "number"
        if isinstance(value, list):
            types = list(set(self.type_name(x) for x in value))
            if not types or len(types) > 1:
                return "Any[]"
            # there is only one type
            return f"{types[0]}[]"
        return "object"

    def extract_dicts(self, data: dict, name=None):
        if not data:
            return
        if isinstance(data, dict):
            keys = get_keys(data)
            self.keyses.add(keys)
            if name is not None:
                if keys not in self.fieldnames:
                    self.fieldnames[keys] = set()
                self.fieldnames[keys].add(name)
            self.values[keys] = data
            for key, value in data.items():
                if value:
                    if isinstance(value, dict):
                        self.extract_dicts(value, key)
                    if isinstance(value, list):
                        for x in value:
                            if len(key) > 1 and key.endswith("s"):
                                key = key[:-1]
                            self.extract_dicts(x, key)


def json_to_tstype(data: dict, name: str | None = None) -> str:
    type_collector = TypeCollector()

    if data is None:
        return "/** null */"
    if not data:
        if isinstance(data, list):
            return "/** [] */"
        if isinstance(data, dict):
            return "/** {} */"
        return f"/** {repr(data).lower()} */"

    if isinstance(data, dict):
        type_collector.extract_dicts(data, name)
    elif isinstance(data, list):
        if name is None:
            name = "object"
        for x in data:
            type_collector.extract_dicts(x, name)

    definitions = []
    for keys in type_collector.keyses:
        value = type_collector.values.get(keys)
        definition = type_collector.to_tstype(value)
        definitions.append(definition)

    return "\n".join(definitions)


class Main(cmd.TextIoProcessor):
    def __init__(self):
        super().__init__()
        self.parser.add_argument(
            "--name",
            dest="name",
            default=None,
            required=False,
            help="what to call a top-level item",
        )

    def process_file_handle(self, filename: str, file_handle: TextIO):
        ts_type = json_to_tstype(json.load(file_handle), self.args.name)
        if ts_type:
            print(ts_type)


if __name__ == "__main__":
    Main().main()
